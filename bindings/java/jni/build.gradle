plugins {
    id 'java'
    id 'idea'
    id 'signing'
    id 'java-library'
    id 'maven-publish'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id "de.undercouch.download" version "4.1.2"
    id 'com.github.sherter.google-java-format' version '0.8'
}

println("Notice: current gradle version is " + gradle.gradleVersion)
sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    api ('org.slf4j:slf4j-api:1.7.36')
    api ('com.fasterxml.jackson.core:jackson-databind:2.14.2')

    testCompile ('org.slf4j:slf4j-log4j12:1.7.36')
    testCompile ('junit:junit:4.13.2')
}

archivesBaseName = 'bcos-sdk-jni'
group = 'org.fisco-bcos'
version = '3.3.0-SNAPSHOT'

// Additional attribute definition
ext {
    if (!project.hasProperty("ossrhUsername")) {
        ossrhUsername="xxx"
    }

    if (!project.hasProperty("ossrhPassword")) {
        ossrhPassword="xxx"
    }
}

jar {
    exclude '**/*.xml'
    exclude '**/*.properties'

    manifest {
        try {
            def repo = grgit.open(currentDir: project.rootDir)
            if (repo != null) {

                def date = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                def branch = repo.branch.getCurrent().getName()
                def commit = repo.head().getAbbreviatedId(40)

                attributes(["Implementation-Timestamp": date,
                            "Git-Branch"              : branch,
                            "Git-Commit"              : commit])
            }
        } catch (Exception e) {
            e.printStackTrace()
        }
    } from sourceSets.main.output

    doLast {
        copy {
            from destinationDirectory
            into 'dist/apps'
        }

        copy {
            from configurations.runtimeClasspath
            into 'dist/lib'
        }

        copy {
            from file('src/test/resources/log4j.properties')
            into 'dist/conf'
        }

        copy {
            from file('src/test/resources/clog.ini')
            into 'dist/conf'
        }
    }
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

//srourceDir="./.source"
//task downloadBcosCSdk(type: Download) {
//    src 'http://localhost:8081/example/test-jar-test_1.jar'
//    dest "$srourceDir"
//}
//
//// Notice: build bcos-sdk jni dynamic library
//task buildJniTask(type: Exec) {
//    dependsOn: downloadBcosCSdk
//    workingDir "$projectDir"
//    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//        // TODO: fix ,add .bat
//        commandLine 'cmd', '/c', 'scripts/compile_jni_lib.sh'
//    } else {
//        commandLine 'sh', '-c', 'bash scripts/compile_jni_lib.sh'
//    }
//}

// Notice: build bcos-sdk jni dynamic library
task java2JniTask(type: Exec) {
    workingDir "$projectDir"
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        // TODO: fix ,add .bat
        commandLine 'cmd', '/c', 'bash scripts/java2jni.sh'
    } else {
        commandLine 'sh', '-c', 'bash scripts/java2jni.sh'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            artifactId project.name
            groupId project.group
            version project.version

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'fisco-bcos'
                description = 'fisco-bcos bcos-sdk-jni'
                url = 'http://www.fisco-bcos.org'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'https://github.com/FISCO-BCOS/bcos-sdk-jni.git'
                    url = 'https://github.com/FISCO-BCOS/bcos-sdk-jni.git'
                }

                developers {
                    developer {
                        id = 'zhangsan'
                        name = 'zhangsan'
                        email = 'zhangsan@example.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoURL = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoURL = "https://oss.sonatype.org/content/repositories/snapshots"
            url = !version.endsWith("SNAPSHOT") ? releasesRepoURL : snapshotsRepoURL

            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}

