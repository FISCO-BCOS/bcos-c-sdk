name: bcos-c-sdk GitHub Actions
on:
  push:
    paths-ignore:
      - "docs/**"
      - "Changelog.md"
      - "README.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "Changelog.md"
      - "README.md"
  release:
    types: [ published, created, edited ]
env:
  CCACHE_DIR: ${{ github.workspace }}/ccache

jobs:
  build_with_clang:
    name: build_with_clang
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - name: Nightly default
        run: rustup default nightly
      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            /usr/local/share/vcpkg
            ccache
          key: vcpkg-clang-v1-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            vcpkg-clang-v1-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            vcpkg-clang-v1-notest-${{ runner.temp }}-${{ github.base_ref }}-
            vcpkg-clang-v1-notest-${{ runner.temp }}-
      - name: install macOS dependencies
        if: runner.os == 'macOS'
        run: brew install ccache lcov
      - name: fetch vcpkg
        run: cd /usr/local/share/vcpkg/ && git fetch && git reset --hard && git pull && cd -
      - name: configure
        if: runner.os == 'macOS'
        run: |
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path) && CC=/usr/bin/clang CXX=/usr/bin/clang++ 
          mkdir build && cd build 
          cmake  ../ -DBUILD_JNI=ON -DBUILD_SAMPLE=ON -DTESTS=ON -DCOVERAGE=ON -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
      - name: compile
        run: export CFLAGS="${CFLAGS} -fPIC";export CXXFLAGS="${CXXFLAGS} -fPIC"; cd build && make -j4
      - name: run test
        run: cd build && CTEST_OUTPUT_ON_FAILURE=TRUE make test
      - name: print link.txt
        run: cat build/CMakeFiles/bcos-c-sdk*.dir/link.txt
      - uses: actions/upload-artifact@v2
        with:
          name: libbcos-c-sdk.dylib.zip
          path: build/libbcos-c-sdk.dylib
      - uses: actions/upload-artifact@v2
        with:
          name: libbcos-sdk-jni.dylib.zip
          path: bindings/java/jni/src/main/resources/META-INF/native/libbcos-sdk-jni.dylib
  build_with_gcc:
    name: build_with_gcc
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            /usr/local/share/vcpkg
            ccache
          key: vcpkg-gcc-v1-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            vcpkg-gcc-v1-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            vcpkg-gcc-v1-notest-${{ runner.temp }}-${{ github.base_ref }}-
            vcpkg-gcc-v1-notest-${{ runner.temp }}-
      - name: install Ubuntu dependencies
        run: sudo apt install -y git curl openssl build-essential cmake ccache lcov
      - name: fetch vcpkg
        run: cd /usr/local/share/vcpkg/ && git fetch && git reset --hard && git pull && cd -
      - name: configure
        run: |
          export CC='gcc-10'; export CXX='g++-10'
          export CFLAGS="${CFLAGS} -fPIC";export CXXFLAGS="${CXXFLAGS} -fPIC"; 
          mkdir -p build && cd build 
          cmake  ../ -DBUILD_JNI=ON -DBUILD_SAMPLE=ON -DTESTS=ON -DCOVERAGE=ON -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
      - name: compile
        run: cd build && make -j4
      - name: run test
        run: cd build && CTEST_OUTPUT_ON_FAILURE=TRUE make test
      - name: print link.txt
        run: cat build/CMakeFiles/bcos-c-sdk*.dir/link.txt
      - name: run coverage
        run: cd build && make cov
      - name: upload coverage report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./build/coverage.info
          version: "v0.1.15"
          flags: unittests
          name: c sdk coverage
          fail_ci_if_error: false
          verbose: true
  build_with_centos:
    name: build_with_centos
    runs-on: ubuntu-latest
    container:
      image: docker.io/centos:7
      volumes:
        - /usr/local/share/vcpkg:/usr/local/share/vcpkg
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - name: install rust language
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-06-17
          override: true
      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            /usr/local/share/vcpkg
            ccache
          key: vcpkg-centos-v1-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            vcpkg-centos-v1-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            vcpkg-centos-v1-notest-${{ runner.temp }}-${{ github.base_ref }}-
            vcpkg-centos-v1-notest-${{ runner.temp }}-
      - name: install CentOS dependencies
        run: |
          yum install -y epel-release centos-release-scl
          yum install -y https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
          yum install -y java-11-openjdk-devel wget git make gcc gcc-c++ glibc-static glibc-devel openssl openssl-devel ccache devtoolset-11 llvm-toolset-7.0 rh-perl530-perl libzstd-devel zlib-devel flex bison python-devel python3-devel
      - name: reinstall cmake
        run: |
          wget -c https://github.com/Kitware/CMake/releases/download/v3.27.8/cmake-3.27.8-linux-x86_64.tar.gz
          tar -zxvf cmake-3.27.8-linux-x86_64.tar.gz && mkdir -p /usr/local/cmake && cd cmake-3.27.8-linux-x86_64 && cp -r * /usr/local/cmake
          ln -s /usr/local/cmake/bin/cmake /usr/bin/cmake
          cmake --version
          git --version
      - name: fetch vcpkg
        run: cd /usr/local/share/vcpkg/ && git fetch && git reset --hard && git pull && cd -
      - name: configure
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          . /opt/rh/devtoolset-11/enable
          . /opt/rh/rh-perl530/enable
          export LIBCLANG_PATH=/opt/rh/llvm-toolset-7.0/root/lib64/
          . /opt/rh/llvm-toolset-7.0/enable
          java -version
          export CFLAGS="${CFLAGS} -fPIC"
          export CXXFLAGS="${CXXFLAGS} -fPIC"
          mkdir -p build && cd build
          cmake ../ -DBUILD_JNI=ON -DBUILD_SAMPLE=ON -DTESTS=ON -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
          make -j4
      - name: run test
        run: cd build && CTEST_OUTPUT_ON_FAILURE=TRUE make test
      - name: print link.txt
        run: cat build/CMakeFiles/bcos-c-sdk*.dir/link.txt
      - uses: actions/upload-artifact@v2
        with:
          name: libbcos-c-sdk.so.zip
          path: build/libbcos-c-sdk.so
      - uses: actions/upload-artifact@v2
        with:
          name: libbcos-sdk-jni.so.zip
          path: bindings/java/jni/src/main/resources/META-INF/native/libbcos-sdk-jni.so
  build_with_windows:
    name: build_with_windows
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-2019 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            C:\vcpkg
            ccache
          key: vcpkg-msvc-v1-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            vcpkg-msvc-v1-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            vcpkg-msvc-v1-notest-${{ runner.temp }}-${{ github.base_ref }}-
            vcpkg-msvc-v1-notest-${{ runner.temp }}-
      - name: Add MSbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: fetch vcpkg
        run: cd C:\vcpkg && git fetch && git reset --hard && git pull && cd -
      - name: configure
        if: runner.os == 'Windows'
        run: |
          mkdir -p build && cd build 
          cmake  -G "Visual Studio 16 2019" -A x64 ../ -DCMAKE_BUILD_TYPE=Release -DBOOST_USE_WINAPI_VERSION=BOOST_WINAPI_VERSION_WIN7 -D_WIN32_WINNT=0x0601 -DTESTS=ON -DBUILD_JNI=ON -DVCPKG_TARGET_TRIPLET='x64-windows-static' -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake || cat C:\vcpkg\buildtrees\fisco-bcos-cpp-sdk\build-x64-windows-static-dbg-out.log
      - name: compile
        run: cd build && MSBuild bcos-c-sdk.sln /p:Configuration=Release /p:Platform=x64
      - uses: actions/upload-artifact@v2
        with:
          name: bcos-c-sdk.lib.zip
          path: D:\a\bcos-c-sdk\bcos-c-sdk\build\Release\bcos-c-sdk.lib
      - uses: actions/upload-artifact@v2
        with:
          name: bcos-c-sdk.dll.zip
          path: D:\a\bcos-c-sdk\bcos-c-sdk\build\Release\bcos-c-sdk.dll
      - uses: actions/upload-artifact@v2
        with:
          name: bcos-sdk-jni.lib.zip
          path: D:\a\bcos-c-sdk\bcos-c-sdk\bindings\java\jni\src\main\resources\META-INF\native\Release\bcos-sdk-jni.lib
      - uses: actions/upload-artifact@v2
        with:
          name: bcos-sdk-jni.dll.zip
          path: D:\a\bcos-c-sdk\bcos-c-sdk\bindings\java\jni\src\main\resources\META-INF\native\Release\bcos-sdk-jni.dll
